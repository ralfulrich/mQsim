#
# Set verbosity
#
/control/verbose 0
#
# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/viewer/set/background white
/vis/drawVolume
#
# Specify view angle:
#/vis/viewer/set/viewpointThetaPhi 90. 0.
#
# Specify zoom value:
/vis/viewer/zoom 20
#
# Specify style (surface or wireframe):
#/vis/viewer/set/style wireframe
#
# Draw coordinate axes:
#/vis/scene/add/axes 0 0 0 1 m
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
#
#/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/setRGBA mcp- 0.8 0.2 1.0 1.0
/vis/modeling/trajectories/drawByParticleID-0/set mu- blue
/vis/modeling/trajectories/drawByParticleID-0/set mu+ blue
/vis/modeling/trajectories/drawByParticleID-0/set pi- red
/vis/modeling/trajectories/drawByParticleID-0/set pi+ red
/vis/modeling/trajectories/drawByParticleID-0/set e- cyan
/vis/modeling/trajectories/drawByParticleID-0/set e+ cyan
/vis/modeling/trajectories/drawByParticleID-0/setRGBA gamma 0.9 0.9 0 1.0
/vis/modeling/trajectories/drawByParticleID-0/set opticalphoton green
#
/tracking/storeTrajectory 1
#
# Draw hits at end of event:
/vis/scene/add/hits
#
/vis/filtering/trajectories/create/particleFilter
/vis/filtering/trajectories/particleFilter-0/add mcp-
/vis/filtering/trajectories/particleFilter-0/add gamma
/vis/filtering/trajectories/particleFilter-0/add e+
/vis/filtering/trajectories/particleFilter-0/add e-
/vis/filtering/trajectories/particleFilter-0/add mu+
/vis/filtering/trajectories/particleFilter-0/add mu-
/vis/filtering/trajectories/particleFilter-0/add nu_mu+
/vis/filtering/trajectories/particleFilter-0/add nu_	mu-
/vis/filtering/trajectories/particleFilter-0/add neutron
/vis/filtering/trajectories/particleFilter-0/add anti_neutron
/vis/filtering/trajectories/particleFilter-0/add opticalphoton
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
# /vis/filtering/trajectories/particleFilter-0/invert true
#
# /vis/filtering/trajectories/create/attributeFilter
# /vis/filtering/trajectories/attributeFilter-0/setAttribute IMag
# /vis/filtering/trajectories/attributeFilter-0/addInterval 10GeV 10TeV
#
# To superimpose all of the events from a given run:
#/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
#
# Set visualization to accumulate events into one picture
#
/vis/scene/endOfEventAction accumulate


#/vis/ogl/printEPS
